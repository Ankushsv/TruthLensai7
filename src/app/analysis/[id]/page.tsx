// This is an autogenerated file from Firebase Studio.
'use client';

import { useEffect, useState, use } from 'react';
import { getAnalysisById, AnalysisRecord } from '@/services/analysis-records';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { AlertCircle, CheckCircle, ExternalLink, HelpCircle, Link as LinkIcon, ListTree, Newspaper } from 'lucide-react';
import { cn } from '@/lib/utils';
import Link from 'next/link';
import { Button } from '@/components/ui/button';

export default function AnalysisDetailsPage({ params }: { params: { id: string } }) {
    const [record, setRecord] = useState<AnalysisRecord | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { id } = use(params);

    useEffect(() => {
        if (id) {
            getAnalysisById(id)
                .then(data => {
                    if (data) {
                        setRecord(data);
                    } else {
                        setError('Analysis record not found.');
                    }
                })
                .catch(err => {
                    console.error(err);
                    setError('Failed to load analysis record.');
                })
                .finally(() => {
                    setIsLoading(false);
                });
        }
    }, [id]);

    if (isLoading) {
        return (
            <div className="container mx-auto max-w-4xl">
                <Card>
                    <CardHeader>
                        <CardTitle>Loading Analysis...</CardTitle>
                        <CardDescription>Please wait while we fetch the details.</CardDescription>
                    </CardHeader>
                    <CardContent className="flex items-center justify-center p-12">
                        <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin"></div>
                    </CardContent>
                </Card>
            </div>
        );
    }

    if (error) {
        return (
            <div className="container mx-auto max-w-4xl">
                <Card>
                    <CardHeader>
                        <CardTitle className="text-destructive">Error</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p>{error}</p>
                    </CardContent>
                </Card>
            </div>
        );
    }

    if (!record) {
        return null;
    }

    const credibilityPercent = Math.round(record.credibilityScore * 100);

    const getCredibilityInfo = () => {
        if (credibilityPercent >= 70) {
            return {
                Icon: CheckCircle,
                colorClass: 'text-green-600',
                label: 'High Credibility'
            };
        }
        if (credibilityPercent >= 40) {
            return {
                Icon: AlertCircle,
                colorClass: 'text-yellow-600',
                label: 'Moderate Credibility'
            };
        }
        return {
            Icon: HelpCircle,
            colorClass: 'text-red-600',
            label: 'Low Credibility'
        };
    };

    const { Icon, colorClass, label } = getCredibilityInfo();
    
    const createdAtDate = record.createdAt ? new Date(record.createdAt) : new Date();

    return (
        <div className="container mx-auto max-w-4xl">
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                        <Icon className={cn('size-6', colorClass)} />
                        Credibility Analysis: {label}
                    </CardTitle>
                    <CardDescription>
                        Detailed breakdown of the AI-powered credibility assessment from {createdAtDate.toLocaleString()}.
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="space-y-2">
                        <div className="flex justify-between items-baseline">
                            <h3 className="text-lg font-semibold">Credibility Score</h3>
                            <span className={cn('text-2xl font-bold', colorClass)}>{credibilityPercent}%</span>
                        </div>
                        <Progress value={credibilityPercent} />
                        <p className="text-sm text-muted-foreground">
                            This score represents the estimated trustworthiness of the content.
                        </p>
                    </div>

                    <div className="space-y-2">
                        <h3 className="text-lg font-semibold">Submitted Content</h3>
                        <p className="text-sm text-muted-foreground bg-slate-50 p-3 rounded-md border">{record.content}</p>
                    </div>

                    <div className="space-y-2">
                        <h3 className="text-lg font-semibold">Key Findings</h3>
                        <p className="text-sm text-muted-foreground">{record.explanation}</p>
                    </div>
                    
                    {record.flags && record.flags.length > 0 && (
                        <div className="space-y-2">
                            <h3 className="text-lg font-semibold flex items-center gap-2"><ListTree className="size-4 text-primary" /> Potential Issues</h3>
                            <div className="flex flex-wrap gap-2">
                            {record.flags.map((flag, index) => (
                                <Badge key={index} variant="destructive">
                                    {flag}
                                </Badge>
                            ))}
                            </div>
                        </div>
                    )}

                    {record.sourcesChecked && record.sourcesChecked.length > 0 && (
                        <div className="space-y-2">
                            <h3 className="text-lg font-semibold flex items-center gap-2"><Newspaper className="size-4 text-primary" /> Sources Checked</h3>
                            <div className="flex flex-wrap gap-2">
                            {record.sourcesChecked.map((source, index) => (
                                <Badge key={index} variant="secondary">
                                    {source}
                                </Badge>
                            ))}
                            </div>
                        </div>
                    )}
                    
                    {record.factCheckReferences && record.factCheckReferences.length > 0 && (
                        <div className="space-y-2">
                             <h3 className="text-lg font-semibold flex items-center gap-2"><LinkIcon className="size-4 text-primary" /> Fact-Check References</h3>
                            <ul className="list-disc pl-5 space-y-1 text-sm">
                                {record.factCheckReferences.map((ref, index) => (
                                   <li key={index}>
                                        <a href={ref} target="_blank" rel="noopener noreferrer" className="text-primary hover:underline flex items-center gap-1">
                                           {ref} <ExternalLink className="size-3" />
                                        </a>
                                   </li>
                                ))}
                            </ul>
                        </div>
                    )}

                    <div className="pt-4 border-t">
                        <Button asChild variant="outline">
                            <Link href="/">
                                Analyze New Content
                            </Link>
                        </Button>
                    </div>

                </CardContent>
            </Card>
        </div>
    );
}
