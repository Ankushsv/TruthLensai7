// This is an autogenerated file from Firebase Studio.
'use server';

import { db } from '@/lib/firebase';
import { collection, addDoc, getDoc, doc, query, orderBy, limit, getDocs, Timestamp, serverTimestamp } from 'firebase/firestore';

export type AnalysisRecord = {
    id: string;
    content: string;
    credibilityScore: number;
    explanation: string;
    flags: string[];
    sourcesChecked: string[];
    factCheckReferences: string[];
    createdAt: string; // Changed to string for serialization
};

export type AnalysisRecordCreate = Omit<AnalysisRecord, 'id' | 'createdAt'>;

// Helper to convert Firestore data to AnalysisRecord, ensuring createdAt is a string
function toAnalysisRecord(doc: any): AnalysisRecord {
    const data = doc.data();
    const createdAt = data.createdAt;
    let createdAtString: string;

    if (createdAt instanceof Timestamp) {
        createdAtString = createdAt.toDate().toISOString();
    } else if (createdAt instanceof Date) {
        createdAtString = createdAt.toISOString();
    } else if (typeof createdAt === 'string') {
        createdAtString = createdAt;
    } else {
        createdAtString = new Date().toISOString();
    }

    return {
        id: doc.id,
        content: data.content,
        credibilityScore: data.credibilityScore,
        explanation: data.explanation,
        flags: data.flags,
        sourcesChecked: data.sourcesChecked,
        factCheckReferences: data.factCheckReferences,
        createdAt: createdAtString,
    };
}


export async function createAnalysisRecord(data: Omit<AnalysisRecord, 'id' | 'createdAt'>): Promise<AnalysisRecord> {
    const docRef = await addDoc(collection(db, "analysisRecords"), {
        ...data,
        createdAt: serverTimestamp(),
    });

    const newRecord: AnalysisRecord = {
        ...data,
        id: docRef.id,
        createdAt: new Date().toISOString(), // Return an ISO string for immediate use
    };
    return newRecord;
}

export async function getAnalysisById(id: string): Promise<AnalysisRecord | null> {
    const docRef = doc(db, "analysisRecords", id);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
        return toAnalysisRecord(docSnap);
    } else {
        return null;
    }
}

export async function getRecentAnalyses(count: number = 10): Promise<AnalysisRecord[]> {
    const q = query(collection(db, "analysisRecords"), orderBy("createdAt", "desc"), limit(count));
    const querySnapshot = await getDocs(q);
    
    return querySnapshot.docs.map(toAnalysisRecord);
}
