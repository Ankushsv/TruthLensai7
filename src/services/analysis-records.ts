// This is an autogenerated file from Firebase Studio.
'use server';

import { db } from '@/lib/firebase';
import { collection, addDoc, getDoc, doc, query, orderBy, limit, getDocs, Timestamp, serverTimestamp } from 'firebase/firestore';

export type AnalysisRecord = {
    id: string;
    content: string;
    credibilityScore: number;
    explanation: string;
    flags: string[];
    sourcesChecked: string[];
    factCheckReferences: string[];
    createdAt: Timestamp | Date | string; // Allow multiple types for compatibility
};

export type AnalysisRecordCreate = Omit<AnalysisRecord, 'id' | 'createdAt'>;

export async function createAnalysisRecord(data: AnalysisRecordCreate): Promise<AnalysisRecord> {
    const docRef = await addDoc(collection(db, "analysisRecords"), {
        ...data,
        createdAt: serverTimestamp(),
    });

    return {
        ...data,
        id: docRef.id,
        createdAt: new Date().toISOString(), // Return an ISO string for immediate use
    };
}

export async function getAnalysisById(id: string): Promise<AnalysisRecord | null> {
    const docRef = doc(db, "analysisRecords", id);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
        const data = docSnap.data();
        const createdAt = data.createdAt;

        return {
            id: docSnap.id,
            content: data.content,
            credibilityScore: data.credibilityScore,
            explanation: data.explanation,
            flags: data.flags,
            sourcesChecked: data.sourcesChecked,
            factCheckReferences: data.factCheckReferences,
            createdAt: createdAt instanceof Timestamp ? createdAt.toDate() : new Date(createdAt),
        } as AnalysisRecord;
    } else {
        return null;
    }
}

export async function getRecentAnalyses(count: number = 10): Promise<AnalysisRecord[]> {
    const q = query(collection(db, "analysisRecords"), orderBy("createdAt", "desc"), limit(count));
    const querySnapshot = await getDocs(q);
    
    const records: AnalysisRecord[] = [];
    querySnapshot.forEach((doc) => {
        const data = doc.data();
        const createdAt = data.createdAt;
        records.push({
            id: doc.id,
            content: data.content,
            credibilityScore: data.credibilityScore,
            explanation: data.explanation,
            flags: data.flags,
            sourcesChecked: data.sourcesChecked,
            factCheckReferences: data.factCheckReferences,
            createdAt: createdAt instanceof Timestamp ? createdAt.toDate() : new Date(createdAt),
        } as AnalysisRecord);
    });
    
    return records;
}
